name: Template Windows CopyFiles Workflow

on:
  workflow_call:
    inputs:
      SourceFolder:
        description: 'Source folder path'
        required: true
        type: string
      TargetFolder:
        description: 'Target folder path'
        required: true
        type: string
      contents:
        description: 'Contents to copy (minimatch patterns)'
        required: false
        type: string
        default: '**'
      CleanTargetFolder:
        description: 'Clean target folder before copying'
        required: false
        type: boolean
        default: false
      overwrite:
        description: 'Overwrite files in the target folder'
        required: false
        type: boolean
        default: false
      FlattenFolders:
        description: 'Flatten folder structure'
        required: false
        type: boolean
        default: false

jobs:
  copy-files:
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Debug - Print Inputs
        run: |
          Write-Host "Source Folder: ${{ inputs.SourceFolder }}"
          Write-Host "Target Folder: ${{ inputs.TargetFolder }}"
          Write-Host "Contents: ${{ inputs.contents }}"
          Write-Host "Clean Target Folder: ${{ inputs.CleanTargetFolder}}"
          Write-Host "Overwrite: ${{ inputs.overwrite }}"
          Write-Host "Flatten Folders: ${{ inputs.FlattenFolders }}"
        shell: pwsh

      - name: Debug - Verify Source Folder
        run: |
          try {
            $source = Join-Path -Path "${{ github.workspace }}" -ChildPath "${{ inputs.SourceFolder }}"
            Write-Host "Checking if source folder exists: $source"
            if (-Not (Test-Path -Path $source)) {
              Write-Error "Source folder does not exist: $source"
              exit 1
            }
          } catch {
            Write-Error "An error occurred while verifying the source folder: $_"
            exit 1
          }
        shell: pwsh

      - name: Clean Target Folder (Optional)
        if: ${{ inputs.CleanTargetFolder}}
        run: |
          try {
            $target = Join-Path -Path "${{ github.workspace }}" -ChildPath "${{ inputs.TargetFolder }}"
            Write-Host "Cleaning target folder: $target"
            if (Test-Path -Path $target) {
              Remove-Item -Path $target -Recurse -Force
            }
          } catch {
            Write-Error "An error occurred while cleaning the target folder: $_"
            exit 1
          }
        shell: pwsh

      - name: Copy Files
        run: |
          try {
            $source = Join-Path -Path "${{ github.workspace }}" -ChildPath "${{ inputs.SourceFolder }}"
            $target = Join-Path -Path "${{ github.workspace }}" -ChildPath "${{ inputs.TargetFolder }}"
            $contents = "${{ inputs.contents }}"
            $overwrite = ${{ inputs.overwrite }}
            $flatten = ${{ inputs.FlattenFolders }}

            Write-Host "Source Path: $source"
            Write-Host "Target Path: $target"
            Write-Host "Contents to Copy: $contents"
            Write-Host "overwrite : $overwrite"
            Write-Host "flatten : $flatten"

            # Ensure target folder exists
            if (-not (Test-Path -Path $target)) {
              Write-Host "Creating target folder: $target"
              New-Item -ItemType Directory -Path $target | Out-Null
            }

            # Copy files based on minimatch pattern
            Get-ChildItem -Path $source -Recurse -Include $contents | ForEach-Object {
               $sourceFile= $_.FullName
              #if ($flatten) {
               if (${{ inputs.FlattenFolders }}){
                $destination = Join-Path -Path $target -ChildPath $_.Name
                Write-Host "Inisde Flatten : $destination "
              } else {
                $relativePath = $_.FullName.Substring($source.Length).TrimStart('\', '/')
                $destination = Join-Path -Path $target -ChildPath $relativePath
              }

              Write-Host "Copying file: $sourceFile to $destination"

              # Ensure destination folder exists
              $destinationFolder = Split-Path -Path $destination -Parent
              if (-not (Test-Path -Path $destinationFolder)) {
                New-Item -ItemType Directory -Path $destinationFolder | Out-Null
              }

              # Copy the file
               Write-Host "overwrite : $overwrite "
              if ($overwrite -or -not (Test-Path -Path $destination)) {
                Copy-Item -Path $sourceFile -Destination $destination -Force
              }
            }

            Write-Host "File copy operation completed successfully."
          } catch {
            Write-Error "An error occurred during the file copy operation: $_"
            exit 1
          }

          # Explicitly set exit code to 0 if no errors occurred
          exit 0
        shell: pwsh


      - name: Copy Files Second Time
        run: |
          try {
            $source = Join-Path -Path "${{ github.workspace }}" -ChildPath "${{ inputs.SourceFolder }}"
            $target = Join-Path -Path "${{ github.workspace }}" -ChildPath "${{ inputs.TargetFolder }}"
            $contents = "${{ inputs.contents }}"
            $overwrite = ${{ inputs.overwrite }}
            $flatten = ${{ inputs.FlattenFolders }}

            Write-Host "Source Path: $source"
            Write-Host "Target Path: $target"
            Write-Host "Contents to Copy: $contents"
            Write-Host "overwrite : $overwrite"
            Write-Host "flatten : $flatten"

            # Ensure target folder exists
            if (-not (Test-Path -Path $target)) {
              Write-Host "Creating target folder: $target"
              New-Item -ItemType Directory -Path $target | Out-Null
            }

            # Copy files based on minimatch pattern
            Get-ChildItem -Path $source -Recurse -Include $contents | ForEach-Object {
               $sourceFile= $_.FullName
              #if ($flatten) {
               if (${{ inputs.FlattenFolders }}){
                $destination = Join-Path -Path $target -ChildPath $_.Name
                Write-Host "Inisde Flatten : $destination "
              } else {
                $relativePath = $_.FullName.Substring($source.Length).TrimStart('\', '/')
                $destination = Join-Path -Path $target -ChildPath $relativePath
              }

              Write-Host "Copying file: $sourceFile to $destination"

              # Ensure destination folder exists
              $destinationFolder = Split-Path -Path $destination -Parent
              if (-not (Test-Path -Path $destinationFolder)) {
                New-Item -ItemType Directory -Path $destinationFolder | Out-Null
              }

              # Copy the file
               Write-Host "overwrite : $overwrite "
              if ($overwrite -or -not (Test-Path -Path $destination)) {
                Copy-Item -Path $sourceFile -Destination $destination -Force
              }
            }

            Write-Host "File copy operation completed successfully."
          } catch {
            Write-Error "An error occurred during the file copy operation: $_"
            exit 1
          }

          # Explicitly set exit code to 0 if no errors occurred
          exit 0
        shell: pwsh


      -  name: List Files in Target Folder
         run: |
           try {
             $target = Join-Path -Path "${{ github.workspace }}" -ChildPath "${{ inputs.TargetFolder }}"
             Write-Host "Listing files in target folder: $target"
             Get-ChildItem -Path $target -Recurse | ForEach-Object {
               Write-Host " File Name : $_.FullName"
             }
           } catch {
             Write-Error "An error occurred while listing files in the target folder: $_"
             exit 1
           }
         shell: pwsh
  

      - name: List Files in Target Folder
        run: |
                $target = Join-Path -Path "${{ github.workspace }}" -ChildPath "${{ inputs.TargetFolder }}"
                Write-Host "Listing files in target folder: $target"
                Get-ChildItem -Path $target
        shell: pwsh
